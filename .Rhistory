####################################################################################################################################
####################################################################################################################################
## Step 4: Attribute a capacity score to each itinerary. The higher the seat capacity the airline has on an individual route, the higher the score will be. Itineraries where the airline has more market presence are more desirable; airlines will have more seat capacity to re-accommodate passengers in case of delay/cancellation.
adj_s=get.adjacency(AA_g_s,attr='weight')
busiest_route <- max(adj_s)*2
for (i in 1:length(airport_list)) {
itinerary_table$capacity_score[i] <- ((adj_s[origin,airport_list[i]] +
adj_s[dest,airport_list[i]])/(busiest_route))^(1/4)
}
####################################################################################################################################
####################################################################################################################################
## Step 5: For each point the itinerary is touching, the note's centrality will be calculated. Airlines are more likely to have a strong frequent flyer base, and be perceived as more appealing, in cities that are important to their network.
for (i in 1:length(airport_list)) {
itinerary_table$market_presence_score[i] <- (AA_ec$vector[[origin]]^(1/6) +
AA_ec$vector[[dest]]^(1/6) +
AA_ec$vector[[airport_list[i]]]^(1/6))/3
}
colnames(itinerary_table)[1] <- 'itinerary'
itinerary_table$hub_score <- hub_score(airport_list)
itinerary_table$score_stopover <- stopover_score(AA_distances)
itinerary_table$itinerary_score <- rowSums(itinerary_table[,-1])
aa_itinerary_table  <- itinerary_table
####################################################################################################################################
####################################################################################################################################
results <- rbind(dl_itinerary_table, ua_itinerary_table, aa_itinerary_table)
results <- results[order(-results$itinerary_score),]
kable(results) %>%
kable_styling(bootstrap_options = "striped", font_size = 9)%>%
add_header_above(c(" ", " Itinerary Quality Score Table" = 7))
knitr::opts_chunk$set(echo = TRUE)
packages_list <- c('recommenderlab')
for (i in packages_list){
if(!i%in%installed.packages()){
install.packages(i, dependencies = TRUE)
library(i, character.only = TRUE)
print(paste0(i, ' has been installed'))
} else {
print(paste0(i, ' is already installed'))
library(i, character.only = TRUE)
}
}
load("data/bigMovieLense.RData")
data("Groceries")
groceriesDataset <- as(Groceries, "binaryRatingMatrix")
bigMovieLense_1 <- bigMovieLense[1:2000,1:2000]
print('Groceries Dataset:')
print(head(groceriesDataset))
print('bigMovieLense Dataset:')
print(head(bigMovieLense_1))
bigMovieLense_Binarized <- binarize(bigMovieLense_1, minRating=3)
print('Binarized bigMOvieLense:')
print(head(bigMovieLense_Binarized))
esSplit_groceries <- evaluationScheme(groceriesDataset, method="cross", train=0.75, given=1)
esSplit_bigMovieLense <- evaluationScheme(bigMovieLense_Binarized, method="cross", train=0.75, given=-1)
print('Groceries Sets:')
getData(esSplit_groceries, "train")
knitr::opts_chunk$set(echo = TRUE)
#library(readxl)
#library(tidyr)
library(ggplot2)
library(corrplot)
library(GGally)
library(gridExtra)
library(leaflet)
library(jtools)
library(lattice)
library(car)
library(caret)
library(MASS)
load('data_output/RMarkdown_Objects.RData')
station_icon = makeIcon(iconUrl = 'documents/station_icon.jpg',
iconWidth = 30, iconHeight = 30)
map <- leaflet(stations) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~long, lat=~lat,
popup=~station_name,
icon = station_icon)
map
str(pollution_daily_h)
summary(pollution_daily_h)
# Generate plots for pollutants
plot_pollution <- list()
increment <- 1
for (i in c(list_pollutants,weather_param)){
var_color <- ifelse(i %in% pollutants$pollutant, pollutants[pollutants$pollutant == i, 'color'], 'skyblue')
plot_pollution[[increment]] <- ggplot(data=pollution_daily_v[pollution_daily_v$variable == i,],
aes(x=date,y=value))+
geom_line(color=var_color)+
labs(title = i)+
theme(legend.position="none", axis.title = element_blank(), plot.title = element_text(hjust = 0.5))
increment <- increment + 1
}
# Display plots
grid.arrange(grobs=plot_pollution, ncol=5, nrow=4)
corrplot(cor(pollution_daily_h[, names(pollution_daily_h)[sapply(pollution_daily_h,is.numeric)]]),
order = 'FPC',
type = 'upper',
diag = FALSE,
tl.srt = 45,
)
ggpairs(pollution_daily_h[, c('NO2', 'SO2', 'O3', 'PM2.5', weather_param)],
lower = list(continuous = wrap('points', alpha = 0.3, size = 0.1)))+
theme(panel.grid.major = element_blank())
set.seed(2018)
train.size <- 0.8
train.index <- sample.int(length(pollution_daily_h$NO2), round(length(pollution_daily_h$NO2) * train.size))
train.sample <- pollution_daily_h[train.index,]
test.sample <- pollution_daily_h[-train.index,]
multi_model_NO2<-lm(NO2~.-month-week-date-temp_min-temp_max, data=train.sample)
lm_stats <- summary(multi_model_NO2)
print(lm_stats)
plot_summs(multi_model_NO2, scale = TRUE, plot.distributions = TRUE, inner_ci_level = 0.95)
resids_multi_NO2 <- multi_model_NO2$residuals
par(mfrow=c(2,2))
plot(resids_multi_NO2, type='o', xlab='',ylab='',xaxt='n',lwd=2,pch=19, main='Multi Model NO2', col='cornflowerblue'); grid()
hist(resids_multi_NO2, col='cornflowerblue',main='Histogram of Residuals',xlab=' ')
boxplot(resids_multi_NO2,main='Boxplot', col='cornflowerblue'); grid()
qqnorm(resids_multi_NO2, col='cornflowerblue', main='QQ plot',xlab=' '); grid()
step_0 <- stepAIC(multi_model_NO2,direction = "both")
step_0$anova
multi_model_NO2_0<-lm(NO2~.-month-week-date-temp_min-temp_max-PM10-NMHC, data=train.sample)
lm_stats_0 <- summary(multi_model_NO2_0)
vif(multi_model_NO2_0)
knitr::opts_chunk$set(echo = TRUE)
#library(readxl)
#library(tidyr)
library(ggplot2)
library(corrplot)
library(GGally)
library(gridExtra)
library(leaflet)
library(jtools)
library(lattice)
library(car)
library(caret)
library(MASS)
load('data_output/RMarkdown_Objects.RData')
station_icon = makeIcon(iconUrl = 'documents/station_icon.jpg',
iconWidth = 30, iconHeight = 30)
map <- leaflet(stations) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=~long, lat=~lat,
popup=~station_name,
icon = station_icon)
map
str(pollution_daily_h)
summary(pollution_daily_h)
# Generate plots for pollutants
plot_pollution <- list()
increment <- 1
for (i in c(list_pollutants,weather_param)){
var_color <- ifelse(i %in% pollutants$pollutant, pollutants[pollutants$pollutant == i, 'color'], 'skyblue')
plot_pollution[[increment]] <- ggplot(data=pollution_daily_v[pollution_daily_v$variable == i,],
aes(x=date,y=value))+
geom_line(color=var_color)+
labs(title = i)+
theme(legend.position="none", axis.title = element_blank(), plot.title = element_text(hjust = 0.5))
increment <- increment + 1
}
# Display plots
grid.arrange(grobs=plot_pollution, ncol=5, nrow=4)
corrplot(cor(pollution_daily_h[, names(pollution_daily_h)[sapply(pollution_daily_h,is.numeric)]]),
order = 'FPC',
type = 'upper',
diag = FALSE,
tl.srt = 45,
)
ggpairs(pollution_daily_h[, c('NO2', 'SO2', 'O3', 'PM2.5', weather_param)],
lower = list(continuous = wrap('points', alpha = 0.3, size = 0.1)))+
theme(panel.grid.major = element_blank())
set.seed(2018)
train.size <- 0.8
train.index <- sample.int(length(pollution_daily_h$NO2), round(length(pollution_daily_h$NO2) * train.size))
train.sample <- pollution_daily_h[train.index,]
test.sample <- pollution_daily_h[-train.index,]
multi_model_NO2<-lm(NO2~.-month-week-date-temp_min-temp_max, data=train.sample)
lm_stats <- summary(multi_model_NO2)
print(lm_stats)
plot_summs(multi_model_NO2, scale = TRUE, plot.distributions = TRUE, inner_ci_level = 0.95)
resids_multi_NO2 <- multi_model_NO2$residuals
par(mfrow=c(2,2))
plot(resids_multi_NO2, type='o', xlab='',ylab='',xaxt='n',lwd=2,pch=19, main='Multi Model NO2', col='cornflowerblue'); grid()
hist(resids_multi_NO2, col='cornflowerblue',main='Histogram of Residuals',xlab=' ')
boxplot(resids_multi_NO2,main='Boxplot', col='cornflowerblue'); grid()
qqnorm(resids_multi_NO2, col='cornflowerblue', main='QQ plot',xlab=' '); grid()
step_0 <- stepAIC(multi_model_NO2,direction = "both")
step_0$anova
multi_model_NO2_0<-lm(NO2~.-month-week-date-temp_min-temp_max-PM10-NMHC, data=train.sample)
lm_stats_0 <- summary(multi_model_NO2_0)
selectedMod <- step_0
all_vifs <- car::vif(selectedMod)
print('VIF Values of our Initial Explanatory Variables:')
print(all_vifs)
signif_all <- names(all_vifs)
while(any(all_vifs > 5)){
var_with_max_vif <- names(which(all_vifs == max(all_vifs)))                       # get the variable with max vif
signif_all <- signif_all[!(signif_all) %in% var_with_max_vif]                     # re  move this variable
myForm <- as.formula(paste("NO2~ ", paste (signif_all, collapse=" + "), sep=""))  # design the new formula
selectedMod <- lm(myForm, data=train.sample)                                     # re-build model with new formula
all_vifs <- car::vif(selectedMod)
}
print('VIF Values of our Final Explanatory Variables:')
print(all_vifs)
multi_model_NO2_final<-lm(NO2~ SO2 + O3 + PM2.5 + EBE + TCH + temp_avg + precipitation + wind_avg_speed + temp_gap, data=train.sample)
formula(multi_model_NO2_final)
summary(multi_model_NO2_final)
set.seed(2018)
train_control <- trainControl(method="cv", number=10, verboseIter = FALSE)
model_lm_final <- train(NO2 ~ SO2  + O3 + PM2.5 + EBE + TCH + temp_avg + precipitation + wind_avg_speed + temp_gap,
data=train.sample,
trControl=train_control,
method="lm",
preProcess = c('center','scale'))
model_lm_0 <- train(NO2~.-month-week-date-temp_min-temp_max,
data=train.sample,
trControl=train_control,
method="lm",
preProcess = c('center','scale'))
print('INITIAL MODEL:')
print(model_lm_0)
print('FINAL MODEL:')
print(model_lm_final)
test.sample$NO2_predicted_model_final <- predict(multi_model_NO2_final,test.sample)
test.sample$NO2_predicted_model_0 <- predict(multi_model_NO2_0,test.sample)
test.sample[80:90,c('NO2','NO2_predicted_model_0','NO2_predicted_model_final')]
ggplot(test.sample,aes(x=test.sample$NO2,y=test.sample$NO2_predicted_model_final))+
geom_point(size=1, colour='orange')+
geom_point(data = test.sample, aes(x=test.sample$NO2, y=test.sample$NO2_predicted_model_0), size=1, colour='cornflowerblue')+
geom_abline(intercept = 0, slope = 1)+
ggtitle("Predictions on Actual Values") +
xlab("Actual Values") + ylab("Predicted Values")
anova(multi_model_NO2_0, multi_model_NO2_final)
plot_summs(multi_model_NO2_0,multi_model_NO2_final,scale=TRUE)
knitr::opts_chunk$set(echo = FALSE)
### THIS PART CHECKS IF NECESSARY PACKAGES ARE INSTALLED AND LOADED
start_time <- Sys.time()
print(paste0('---START--- Starting at ',start_time))
packages_list <- c('ggplot2',
'quantmod',
'readxl',
'tseries',
'lubridate',
'highcharter',
'zoo',
'lattice',
'mice',
'Amelia',
'tidyr',
'gridExtra',
'leaflet',
'jtools',
'lattice',
'car',
'caret',
'plotly',
'data.table',
'cluster',
'fpc',
'scales',
'prettydoc')
for (i in packages_list){
if(!i%in%installed.packages()){
install.packages(i, dependencies = TRUE)
library(i, character.only = TRUE)
} else {
library(i, character.only = TRUE)
}
}
knitr::opts_chunk$set(echo = FALSE)
### THIS PART CHECKS IF NECESSARY PACKAGES ARE INSTALLED AND LOADED
start_time <- Sys.time()
print(paste0('---START--- Starting at ',start_time))
packages_list <- c('ggplot2',
'quantmod',
'readxl',
'tseries',
'lubridate',
'highcharter',
'zoo',
'lattice',
'Amelia',
'tidyr',
'gridExtra',
'leaflet',
'jtools',
'lattice',
'car',
'caret',
'plotly',
'data.table',
'cluster',
'fpc',
'scales',
'prettydoc')
for (i in packages_list){
if(!i%in%installed.packages()){
install.packages(i, dependencies = TRUE)
library(i, character.only = TRUE)
} else {
library(i, character.only = TRUE)
}
}
print(paste0('[', round(difftime(Sys.time(),start_time, units = 'secs'),1), 's]: ',
'All necessary packages installed and loaded'))
nasdaq_symbols <- read_excel("dataset/nasdaq_symbols.xlsx")
all_stocks <- NULL
increment <- 1
for (i in nasdaq_symbols$Symbol){
temp_stocks <- get.hist.quote(instrument = i,quote = 'AdjClose', provider = 'yahoo', compression = 'd', quiet = TRUE, retclass = 'zoo')
if(increment == 1){
all_stocks <- temp_stocks
}
else{
all_stocks <- merge(all_stocks,temp_stocks)
}
increment <- increment + 1
}
knitr::opts_chunk$set(echo = FALSE)
### THIS PART CHECKS IF NECESSARY PACKAGES ARE INSTALLED AND LOADED
start_time <- Sys.time()
print(paste0('---START--- Starting at ',start_time))
packages_list <- c('ggplot2',
'quantmod',
'readxl',
'tseries',
'lubridate',
'highcharter',
'zoo',
'lattice',
'Amelia',
'tidyr',
'gridExtra',
'leaflet',
'jtools',
'lattice',
'car',
'caret',
'plotly',
'data.table',
'cluster',
'fpc',
'scales',
'prettydoc')
for (i in packages_list){
if(!i%in%installed.packages()){
install.packages(i, dependencies = TRUE)
library(i, character.only = TRUE)
} else {
library(i, character.only = TRUE)
}
}
print(paste0('[', round(difftime(Sys.time(),start_time, units = 'secs'),1), 's]: ',
'All necessary packages installed and loaded'))
nasdaq_symbols <- read_excel("dataset/nasdaq_symbols.xlsx")
all_stocks <- NULL
increment <- 1
for (i in nasdaq_symbols$Symbol){
temp_stocks <- get.hist.quote(instrument = i,quote = 'AdjClose', provider = 'yahoo', compression = 'd', quiet = TRUE, retclass = 'zoo')
if(increment == 1){
all_stocks <- temp_stocks
}
else{
all_stocks <- merge(all_stocks,temp_stocks)
}
increment <- increment + 1
}
nasdaq_symbols <- read_excel("dataset/nasdaq_symbols.xlsx")
all_stocks <- NULL
increment <- 1
for (i in nasdaq_symbols$Symbol){
temp_stocks <- get.hist.quote(instrument = i,quote = 'AdjClose', provider = 'yahoo', compression = 'd', quiet = TRUE, retclass = 'zoo')
if(increment == 1){
all_stocks <- temp_stocks
}
else{
all_stocks <- merge(all_stocks,temp_stocks)
}
increment <- increment + 1
}
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/stavrostsentemeidis/Documents/GitHub/personal-site")
#render your sweet site.
rmarkdown::render_site()
